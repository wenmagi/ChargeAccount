package com.wen.magi.baseframe.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wen.magi.baseframe.models.Income;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INCOME".
*/
public class IncomeDao extends AbstractDao<Income, Long> {

    public static final String TABLENAME = "INCOME";

    /**
     * Properties of entity Income.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property IncomeID = new Property(1, Long.class, "incomeID", false, "INCOME_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Desc = new Property(3, String.class, "desc", false, "DESC");
        public final static Property IncomeNum = new Property(4, Long.class, "incomeNum", false, "INCOME_NUM");
        public final static Property IncomeDate = new Property(5, java.util.Date.class, "incomeDate", false, "INCOME_DATE");
    }


    public IncomeDao(DaoConfig config) {
        super(config);
    }
    
    public IncomeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INCOME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"INCOME_ID\" INTEGER," + // 1: incomeID
                "\"TITLE\" TEXT," + // 2: title
                "\"DESC\" TEXT," + // 3: desc
                "\"INCOME_NUM\" INTEGER," + // 4: incomeNum
                "\"INCOME_DATE\" INTEGER);"); // 5: incomeDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INCOME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Income entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Long incomeID = entity.getIncomeID();
        if (incomeID != null) {
            stmt.bindLong(2, incomeID);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(4, desc);
        }
 
        Long incomeNum = entity.getIncomeNum();
        if (incomeNum != null) {
            stmt.bindLong(5, incomeNum);
        }
 
        java.util.Date incomeDate = entity.getIncomeDate();
        if (incomeDate != null) {
            stmt.bindLong(6, incomeDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Income entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Long incomeID = entity.getIncomeID();
        if (incomeID != null) {
            stmt.bindLong(2, incomeID);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(4, desc);
        }
 
        Long incomeNum = entity.getIncomeNum();
        if (incomeNum != null) {
            stmt.bindLong(5, incomeNum);
        }
 
        java.util.Date incomeDate = entity.getIncomeDate();
        if (incomeDate != null) {
            stmt.bindLong(6, incomeDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Income readEntity(Cursor cursor, int offset) {
        Income entity = new Income( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // incomeID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // desc
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // incomeNum
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // incomeDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Income entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIncomeID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIncomeNum(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIncomeDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Income entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Income entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Income entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
