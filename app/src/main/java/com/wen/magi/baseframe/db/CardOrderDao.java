package com.wen.magi.baseframe.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.wen.magi.baseframe.models.TestDaoModel;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CARD_ORDER.
 */
public class CardOrderDao extends AbstractDao<TestDaoModel, Long> {

    public static final String TABLENAME = "CARD_ORDER_ADD_TYPE";

    /**
     * Properties of entity CardOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderID =
                new Property(1, long.class, "orderID", false, "ORDER_ID");
        public final static Property MerchantID = new Property(2, Long.class, "merchantID", false,
                "MERCHANT_ID");
        public final static Property ClassType = new Property(3, Integer.class, "classType", false,
                "CLASS_TYPE");
        public final static Property CoType =
                new Property(4, Integer.class, "coType", false, "CO_TYPE");
        public final static Property OrderStatus = new Property(5, Integer.class, "orderStatus", false,
                "ORDER_STATUS");
        public final static Property OrderCode = new Property(6, String.class, "orderCode", false,
                "ORDER_CODE");
        public final static Property ClassID = new Property(7, String.class, "classID", false,
                "CLASS_ID");
        public final static Property ClassName = new Property(8, String.class, "className", false,
                "CLASS_NAME");
        public final static Property MerchantName = new Property(9, String.class, "merchantName",
                false, "MERCHANT_NAME");
        public final static Property GroupPurchaseName = new Property(10, String.class,
                "groupPurchaseName", false, "GROUP_PURCHASE_NAME");
        public final static Property MerchantLocation = new Property(11, String.class,
                "merchantLocation", false, "MERCHANT_LOCATION");
        public final static Property UpdateTime = new Property(12, java.util.Date.class, "updateTime",
                false, "UPDATE_TIME");
        public final static Property StartTime = new Property(13, java.util.Date.class, "startTime",
                false, "START_TIME");
        public final static Property EndTime = new Property(14, java.util.Date.class, "endTime", false,
                "END_TIME");
        public final static Property Notice = new Property(15, String.class, "notice", false, "NOTICE");
        public final static Property InviteMsgID = new Property(16, Integer.class, "inviteMsgID", false, "INVITE_MSG_ID");
        public final static Property PunchMsgID = new Property(17, Integer.class, "punchMsgID", false, "PUNCH_MSG_ID");

        public final static Property OrderType = new Property(18, Integer.class, "orderType", false, "CARD_ORDER_TYPE");

    }


    public CardOrderDao(DaoConfig config) {
        super(config);
    }

    public CardOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'CARD_ORDER_ADD_TYPE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ORDER_ID' INTEGER UNIQUE ," + // 1: orderID
                "'MERCHANT_ID' INTEGER," + // 2: merchantID
                "'CLASS_TYPE' INTEGER," + // 3: classType
                "'CO_TYPE' INTEGER," + // 4: coType
                "'ORDER_STATUS' INTEGER," + // 5: orderStatus
                "'ORDER_CODE' TEXT," + // 6: orderCode
                "'CLASS_ID' TEXT," + // 7: classID
                "'CLASS_NAME' TEXT," + // 8: className
                "'MERCHANT_NAME' TEXT," + // 9: merchantName
                "'GROUP_PURCHASE_NAME' TEXT," + // 10: groupPurchaseName
                "'MERCHANT_LOCATION' TEXT," + // 11: merchantLocation
                "'UPDATE_TIME' INTEGER," + // 12: updateTime
                "'START_TIME' INTEGER," + // 13: startTime
                "'END_TIME' INTEGER," + // 14: endTime
                "'NOTICE' TEXT," + // 15: notice
                "'INVITE_MSG_ID' INTEGER," + // 16: inviteMsgID
                "'PUNCH_MSG_ID' INTEGER," + // 17: punchMsgID
                "'CARD_ORDER_TYPE' INTEGER);");// 18: CardOrder
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CARD_ORDER'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, TestDaoModel entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        Long orderId = entity.getOrderID();
        if (orderId != null) {
            stmt.bindLong(2, orderId);
        }

        Long merchantID = entity.getMerchantID();
        if (merchantID != null) {
            stmt.bindLong(3, merchantID);
        }

        Integer classType = entity.getClassType();
        if (classType != null) {
            stmt.bindLong(4, classType);
        }

        Integer coType = entity.getCoType();
        if (coType != null) {
            stmt.bindLong(5, coType);
        }

        Integer orderStatus = entity.getOrderStatusIndex();
        if (orderStatus != null) {
            stmt.bindLong(6, orderStatus);
        }

        String orderCode = entity.getOrderCode();
        if (orderCode != null) {
            stmt.bindString(7, orderCode);
        }

        String classID = entity.getClassID();
        if (classID != null) {
            stmt.bindString(8, classID);
        }

        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(9, className);
        }

        String merchantName = entity.getMerchantName();
        if (merchantName != null) {
            stmt.bindString(10, merchantName);
        }

        String groupPurchaseName = entity.getGroupPurchaseName();
        if (groupPurchaseName != null) {
            stmt.bindString(11, groupPurchaseName);
        }

        String merchantLocation = entity.getMerchantLocation();
        if (merchantLocation != null) {
            stmt.bindString(12, merchantLocation);
        }

        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(13, updateTime.getTime());
        }

        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(14, startTime.getTime());
        }

        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(15, endTime.getTime());
        }
        String notice = entity.getNotice();
        if (notice != null) {
            stmt.bindString(16, notice);
        }
        Integer inviteMsgID = entity.getInviteMsgID();
        if (inviteMsgID != null) {
            stmt.bindLong(17, inviteMsgID);
        }

        Integer punchMsgID = entity.getPunchMsgID();
        if (punchMsgID != null) {
            stmt.bindLong(18, punchMsgID);
        }

        Integer orderType = entity.getOrderType();
        if (orderType != null) {
            stmt.bindLong(19, orderType);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public TestDaoModel readEntity(Cursor cursor, int offset) {
        TestDaoModel entity = new TestDaoModel( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getLong(offset + 1), // orderID
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // merchantID
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // classType
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // coType
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // orderStatus
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orderCode
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // classID
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // className
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // merchantName
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // groupPurchaseName
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // merchantLocation
                cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // updateTime
                cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // startTime
                cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // endTime
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // notice
                cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // inviteMsgID
                cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // punchMsgID
                cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18) //orderType
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, TestDaoModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderID(cursor.getLong(offset + 1));
        entity.setMerchantID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setClassType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCoType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setOrderCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClassID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClassName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMerchantName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGroupPurchaseName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMerchantLocation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUpdateTime(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor
                .getLong(offset + 12)));
        entity.setStartTime(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor
                .getLong(offset + 13)));
        entity.setEndTime(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor
                .getLong(offset + 14)));
        entity.setNotice(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setInviteMsgID(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setPunchMsgID(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setOrderType(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(TestDaoModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(TestDaoModel entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
